[{"title":"Python_Flask学习笔记（上）","url":"/2019/03/04/Python-Flask学习笔记（上）/","content":"### 写在前面\n这个学习笔记是我在做毕业设计时，初学基础知识点的时候记录的笔记，包括一些代码，书上的内容。\n\n我用的参考书是人民邮电出版社的Flask Web开发-基于Python的Web应用开发实战\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/fengmian.png?raw=true)\n\n这部分可能写的有点乱，临时整理，而且初学的时候，写的都很渣，虽然现在我学完了、毕设弄完了技术依旧很渣。\n\n这部分主要是基础基础，没有我自己的代码在里边，至于我自己的代码什么解读发出，看时间，看心情。最近很忙很忙，心情很丧很丧。\n\n### 一、环境安装\n#### 1.1 创建应用目录\n从Github仓库下载源码，下述命令从Github下载示例代码，并检出应用的1a版本。\n```\n$ git clone https://github.com/miguelgrinberg/flasky.git\n$ cd flasky\n$ git checkout 1a\n```\n#### 1.2 虚拟环境\n......\n#### 1.3 在Python3中创建虚拟环境\nPython3和Python2解释器创建虚拟环境的方法有所不同。在Python3中，虚拟环境由Python标准库中的venv包原生支持。\n使用命令安装python3-venv包：\n\n```\n$ sudo apt-get install python3-venv\n```\n\n创建虚拟环境命令：\n\n```\n$ python3 -m venv virtual-environment-name\n```\n\n其中 -m venv 选项的作用是以独立的脚本运行标准库中的venv包，后面的参数作为虚拟环境的名称。\n\n实例，在flasky目录中创建一个名称为venv的虚拟环境\n\n```\n$ python3 -m venv venv\n```\n命令执行完毕后，flasky目录下会出现一个venv的子目录，这就是一个全新的虚拟环境，包括这个项目专用的Python解释器。\n\n#### 1.4 在Python2中创建虚拟环境\nPython2中没有集成venv包。需要使用第三方工具virtualenv创建虚拟环境。\n\n确保当前目录是flasky，然后根据操作系统执行不同的命令。\n\nLinux或macOS：\n\n```\n$ sudo pip install virtualenv\n```\nWindows：\n\n```\n$ pip install virtualenv\n```\n然后创建名称为venv的虚拟环境（保证当前目录为flasky）：\n\n```\n$ virtualenv venv\n```\n这个命令执行后，flasky目录下会出现一个venv的子目录，这就是一个全新的虚拟环境，虚拟环境相关的文件全都在这个子目录中。\n\n#### 1.5 使用虚拟环境\n想使用虚拟环境，要先将其激活。\nLinux或macOS：\n```\n$ source venv/bin/activate\n```\nWindows：\n\n```\n$ venv\\Script\\activate\n```\n例子：\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_1.png?raw=true)\n\n使用deactivate命令退出当前虚拟环境。\n\n#### 1.6 使用pip安装Python包\n\n```\n$ sudo pip install flask\n$ pip freeze\n```\n上一条命令可以查看虚拟环境中安装了哪些包。\n\n**注释**：在我的图灵学院的虚拟机中，有Python3和Python2环境，而在根据上述步骤中，Python3的安装命令并不管用，而pip版本是python3中的，就使用pip install virtualenv命令直接安装，安装好以后虚拟环境中的python版本是3.6的。然后继续进行下边操作就没问题了，使用python3.6环境进行开发测试。\n\n### 二、应用基本结构\n#### 2.1 初始化\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n```\n#### 2.2 路由和视图函数\n在flask中定义路由的最简便的方式，是使用应用实例提供的app.route装饰器。\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_2.png?raw=true)\n\napp.route装饰器注册视图函数是首选方法，但不是唯一方法。Flask还支持另一种传统方法：使用地app.add_url_rule()方法；这个方法接受三个参数：URL、端点名和视图函数。\n例子：\n\n```\ndef index():\nreturn '<h1>Hello World!</h1>'\napp.add_url_rule('/','index',index)\n```\n#### 2.3 一个完整的应用\n```\n$ git checkout 2a\n```\n定义了一个应用实例、一个路由、一个视图函数。\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_3.png?raw=true)\n\n#### 2.4 Web开发服务器\nLinux或macOS中启动Web服务器：\n```\n（venv）$ export FLASK_APP=hello.py\n（venv）$ flask run\n```\nWindows中启动Web服务器：\n```\n（venv）$ set FLASK_APP=hello.py\n（venv）$ flask run\n```\nCtrl+C停止\n\nFlask Web服务器也可以通过编程的方式启动：调用app.run()方法。在没有flask命令的旧版Flask中，如想启动应用，要运行应用的脚本。主脚本的尾部包含下述代码片段：\n\n```\nif __name__ == '__main__':\napp.run()\n```\n#### 2.5 动态路由\ngithub中下载的代码进入2b\n\n```\n$ git checkout 2b\n```\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_4.png?raw=true)\n\n在URL中设置不同的名字，就会有不同的页面显示。\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_5.png?raw=true)\n#### 2.6 调试模式\nFlask应用可以在调试模式中运行。在这个模式下，开发服务器默认会加载两个便利的工具：重载器和调试器。\n\n启用重载器后，Flask会监视项目中的所有源代码文件，发现变动时自动重启服务器。在开发过程中运行启动重载器的服务器特别方便，因为每次修改并保存源码文件后，服务器都会自动重启，让改动生效。\n\n调试器是一个基于Web的工具，当应用抛出未处理的异常时，他会出现在浏览器中。此时，Web浏览器变成交互式栈跟踪，你可以在里边审查源码，在调用栈的任何位置计算表达式。\n\n调试模式默认是禁用状态。若想启用，在执行flask run命令之前设定FLASK_DEBUG=1环境变量：\n\n在Linux或macOS中\n\n```\n（venv）$ export FLASK_APP=hello.py\n（venv）$ export FLASK_DEBUG=1\n（venv）$ flask run\n```\n//在Windows系统中将命令里的export改为set即可。\n\n在使用app.run()方法启动服务器的时候，不会用到FLASK_APP和FLASK_DEBUG环境变量。若想以编程的方式启动调试模式，就使用app.run(debug=True)。\n\n千万不要在生产服务器中启用调试模式。客户端通过调试器能请求执行远程代码，因此可能会导致生产服务器遭到攻击。作为一种简单的保护措施，启动调试模式的时候可以要求输入PIN码，执行flask run命令的时候会打印在控制台中。\n#### 2.7 命令行选项\n\n```\n（venv）$ flask --help\n```\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_6.png?raw=true)\n```\n（venv）$ flask run --help\n```\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_7.png?raw=true)\n#### 2.8 请求-响应循环\n##### 2.8.1应用和请求上下文\n......\n\n......\n\n......\n\n......\n\n### 三、模板\n渲染是一个......的过程，为了渲染模板，Flask使用了一个名为Jinja2的强大模板引擎。\n\n官方参考文档：http://jinja.pocoo.org/docs/2.10/\n\n#### 3.1 Jinja2模板引擎\n示例3-1 templates/index.html：Jinja2模板\n\n```\n<h1>Hello World!</h1>\n```\n示例3-2 templates/user.html：Jinja2模板\n\n```\n<h1>Hello, {{ name }}!</h1>\n```\n##### 3.1.1渲染模板\n默认情况下，Flask在应用目录中的templates子目录中寻找模板。\n示例3-3 hello.py：渲染模板\n\n```\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/user/<name>')\ndef user(name):\n    return render_template('user.html', name=name)\n```\nFlask提供的render_template()函数把Jinja2模板引擎集成到了应用中。\n\n上述中标记的name=name是经常使用的关键字参数，将route传递的name参数值传递到user.html文件中的name位置。\n##### 3.1.2 变量\n在示例3-2中使用的{ { name } }结构表示一个变量，这是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。\n\n变量的值可以通过过滤器修改。常见的Jinja2变量过滤器如下表：\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_8.png?raw=true)\n\n其中safe需要说一下，出于安全考虑，Jinja2会转义所有变量，千万不能在不可信的值上使用safe过滤器，例如用户在表单中输入的文本。\n\n完整过滤器列表可在Jinja2文档(http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters)中查看\n\n##### 3.1.3 控制结构\nJinja2提供了多种控制结构，可用来改变模板的渲染流程。\n在模板中使用条件判断语句：\n\n```\n{% if user %}\nHello, { { user } }!\n{% else %}\nHello, Stranger!\n{% endif %}\n```\n\n另一种常见的需求是在模板中渲染一组元素。使用for循环实现这一需求：\n\n```\n<ul>\n{% for comment in comments %}\n<li>{{ comment }}</li>\n{% endfor %}\n</ul>\n```\nJinja2还支持宏。宏类似于Python代码中的函数。为了重复使用宏，可以把宏保存在单独的文件中，然后在需要使用的模板中导入。\n\n另一种重复使用代码的强大方式是模板继承，这类似于Python代码中的类继承。\n\n......\n\n......\n\nbase.html，基模板：\n\n```\n<html>\n<head>\n {% block head %}\n <title>{% block title %}{% endblock title %} - My Application</title>\n {% endblock head %}\n</head>\n<body>\n {% block body %}\n {% endblock body %}\n</body>\n</html>\n```\n基模板的衍生模板：\n\n```\n{% extend \"base.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n {{ super() }}\n <style>\n </style>\n{% endblock %}\n{% block body %}\n<h1>Hello World!</h1>\n{% endblock %}\n```\n......\n\n具体代码参考书籍（2015年版电子书P22-23<43-44>;2018年第二版纸质书P22-24）\n\n#### 3.2 使用Flask-Bootstrap集成Bootstrap\nBootstrap是Twitter开发的一个开源Web框架，它提供的用户界面组件可用于创建整洁且具有吸引力的网页，而且兼容所有现在的桌面和移动平台Web浏览器。\n\nBootstrap是客户端框架，因此不会直接涉及服务器。服务器需要做的只是提供引用了Bootstrap层叠样式表（CSS）和JavaScript文件的HTML响应，并在HTML、CSS和JavaScript代码中实例化所需的用户界面元素。这些操作最理想的执行场所就是模板。\n\n要想在应用中集成Bootstrap，最直接的方法是根据Bootstrap文档中的说明对HTML模板进行必要的改动。不过，这个任务使用Flask扩展处理要简单得多，而且相关的改动不会导致主逻辑凌乱不堪。\n\n我们要使用的扩展是Flask-Bootstrap，它可以使用pip安装：\n\n```\n(venv) $ pip install flask-bootstrap\n```\nFlask扩展在创建应用实例时初始化。示例3-4是Flask-Bootstrap的初始化方式。\n示例3-4 hello.py：初始化Flask-Bootstrap\n\n```\nfrom flask_bootstrap import Bootstrap\n# ...\nbootstrap = Bootstrap(app)\n```\n扩展通常从flask_<name>包中导入，其中<name>是扩展的名称。多数Flask扩展采用两种初始化方式中的一种。在示例3-4中，初始化扩展的方式是把应用实例作为参数传给构造函数。\n\n初始化Flask-Bootstrap之后，就可以在应用中使用一个包含所有Bootstrap文件和一般结构的基模板。应用利用Jinja2的模板继承机制来扩展这个模板。\n\n示例3-5 templates/user.html（参考书籍内代码）\n\n```\n{% extends \"bootstrap/base.html\" %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block navbar %}\n<div class=\"navbar navbar-inverse\" role=\"navigation\">\n    <div class=\"container\">\n        <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                <span class=\"sr-only\">Toggle navigation</span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"/\">Flasky</a>\n        </div>\n        <div class=\"navbar-collapse collapse\">\n            <ul class=\"nav navbar-nav\">\n                <li><a href=\"/\">Home</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n{% endblock %}\n\n{% block content %}\n<div class=\"container\">\n    <div class=\"page-header\">\n        <h1>Hello, {{ name }}!</h1>\n    </div>\n</div>\n{% endblock %}\n```\nBootstrap官方文档（https://getbootstrap.com/docs/4.1/getting-started/introduction/）\nhttp://www.bootcss.com/\n\nFlask-Bootstrap基模板中定义的区块-表\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_9.png?raw=true)\n\n......\n\n（此处略省3w字，骗你的，省了一段文字，一个代码块）\n\n#### 3.3 自定义错误页面\n\n示例3-6 hello.py ：自定义错误页面\n\n```\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n```\n......\n\n示例3-7 templates/base.html：包含导航栏的应用基模板\n\n```\n{% extends \"bootstrap/base.html\" %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block navbar %}\n<div class=\"navbar navbar-inverse\" role=\"navigation\">\n    <div class=\"container\">\n        <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                <span class=\"sr-only\">Toggle navigation</span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"/\">Flasky</a>\n        </div>\n        <div class=\"navbar-collapse collapse\">\n            <ul class=\"nav navbar-nav\">\n                <li><a href=\"/\">Home</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n{% endblock %}\n\n{% block content %}\n<div class=\"container\">\n    {% block page_content %}{% endblock %}\n</div>\n{% endblock %}\n```\n这个模板中的content区块里只有一个div容器，其中包含一个新的空区块，名为page_content，区块中的内容由衍生模板定义。\n\n示例3-8 templates/404.html：使用模板继承机制自定义404错误页面\n\n```\n{% extends \"base.html\" %}\n\n{% block title %}Flasky - Page Not Found{% endblock %}\n\n{% block page_content %}\n<div class=\"page-header\">\n    <h1>Not Found</h1>\n</div>\n{% endblock %}\n```\n示例3-9 templates/user.html：使用模板继承机制简化页面模板\n\n```\n{% extends \"base.html\" %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block page_content %}\n<div class=\"page-header\">\n    <h1>Hello, {{ name }}!</h1>\n</div>\n{% endblock %}\n```\n#### 3.4 链接\n任何具有多个路由的应用都需要可以连接不同页面的链接，例如导航栏。\n\n在模板中直接编写简单路由的URL链接并不难，但对于包含可变部分的动态路由，在模板中构建正确的URL就很困难了。而且，直接编写URL会对代码中定义的路由产生不必要的依赖关系。如果重新定义路由，模板中的链接可能会失效。\n\n为了避免这些问题，Flask提供了url_for()辅助函数，它使用应用的URL映射中保存的信息生成URL。\n\nurl_for()函数最简单的用法是以视图函数名（或者app.add_url_route()定义路由时使用的端点名）作为参数，返回对应的  URL。\n\n例如，在当前版本的hello.py应用中调用  url_for('index')  得到的结果是  /，即应用的根 URL。\n\n调用  url_for('index',  _external=True)  返回的则是绝对地址，在这个示例中是  http://localhost:5000/。　\n\n生成连接应用内不同路由的链接时，使用相对地址就足够了。如果要生成在浏览器之外使用的链接，则必须使用绝对地址，例如在电子邮件中发送的链接。\n\n使用  url_for()  生成动态  URL  时，将动态部分作为关键字参数传入。\n\n例如，url_for('user',  name='john',  _external=True) 的返回结果是  http://localhost:5000/user/john。\n\n传给url_for()的关键字参数不仅限于动态路由中的参数，非动态的参数也会添加到查询字符串中。\n\n例如，url_for('user',  name='john',  page=2, version=1) 的返回结果是  /user/  john?page=2&version=1。\n\n#### 3.5 静态文件\nWeb  应用不是仅由  Python  代码和模板组成。多数应用还会使用静态文件，例如模板中  HTML  代码引用的图像、JavaScript 源码文件和  CSS。\n\n你可能还记得，在第 2 章中审查hello.py应用的  URL  映射时，其中有一个 static 路由。这是  Flask  为了支持静态文件而自动添加的，这个特殊路由的 URL 是  /static/<filename>。\n\n例如，调用  url_for('static', filename='css/styles.css',  _external=True)  \n得到的结果是http://localhost:5000/static/css/styles.css。\n\n默认设置下，Flask 在应用根目录中名为  static 的子目录中寻找静态文件。如果需要，可在  static  文件夹中使用子文件夹存放文件。\n\n服务器收到映射到  static 路由上的  URL  后，生成的响应包含文件系统中对应文件里的内容。\n\n示例  3-10  展示了如何在应用的基模板中引入  favicon.ico 图标。这个图标会显示在浏览器的地址栏中。\n\n示例  3-10　templates/base.html：定义收藏夹图标\n\n```\n{%  block  head  %}\n {{  super()  }}\n<link  rel=\"shortcut  icon\"  href=\"{{  url_for('static',  filename='favicon.ico')  }}\"\n     type=\"image/x-icon\">\n<link  rel=\"icon\"  href=\"{{  url_for('static',  filename='favicon.ico')  }}\"\n     type=\"image/x-icon\">\n {%  endblock  %}\n```\n这个图标的声明插入head区块的末尾。注意，为了保留基模板中这个区块里的原始内容，我们调用了 super()。\n\n\n```\n(venv) $ git checkout 3d\n```\n\n\n#### 3.6 使用Flask-Moment本地化日期和时间\n处理来自世界各地不同地方的Web应用的用户的日期和时间。\n\nFlask-Moment是一个Flask框架，能简化把Moment.js集成到Jinja2模板中的过程。使用pip安装：\n\n```\n(venv) $ pip install flask_moment\n```\n这个扩展初始化类似与Flask-Bootstrap，所需代码，如示例3-11所示：\n\n示例3-11 hello.py：初始化Flask-Moment\n\n```\nfrom flask_moment import Moment\nmoment = Moment(app)\n```\n除了  Moment.js，Flask-Moment 还依赖  jQuery.js。因此，要在HTML文档的某个地方引入这两个库，可以直接引入，这样可以选择使用哪个版本，也可以使用扩展提供的辅助函数，从内容分发网络（CDN，content delivery network）中引入通过测试的版本。\n\nBootstrap  已经引入了jQuery.js，因此只需引入  Moment.js  即可。\n\n示例  3-12  展示了如何在基模板的scripts 块中引入这个库，同时还保留基模板中定义的原始内容。注意，这个区块在  Flask-Bootstrap 的基模板中已经预定义，因此放在templates/base.html 的任何位置都行。\n\n示例3-12 templates/base.html：引入Moment.js库\n\n```\n{% block scripts %}\n{{ super() }}\n{{ moment.include_moment() }}\n{% endblock %}\n```\n\n为了处理时间戳。Flask-Moment向模板开放了moment对象。示例3-13中的代码把变量current_time传入模板进行渲染。\n\n示例3-13 hello.py：添加一个datatime变量\n\n```\nfrom datetime import datetime\n\n@app.route('/')\ndef index():\n    return render_template('index.html',\n                           current_time=datetime.utcnow())\n```\n示例3-14展示了如何渲染模板变量current_time。\n\n示例3-14 templates/index.html：使用Flask-Moment渲染时间戳\n\n```\n<p>The local date and time is {{ moment(current_time).format('LLL') }}.</p>\n<p>That was {{ moment(current_time).fromNow(refresh=True) }}.</p>\n```\n\n调用Github仓库中的示例源代码：\n\n```\n(venv) $ git checkout 3e\n```\nMoment.js官方文档（http://momentjs.com/docs/#/displaying/）\n\n标准库中关于datetime包的文档（https://docs.python.org/3.6/library/datetime.html）\n\nFlask-Moment渲染的时间戳可实现多种语言的本地化。语言可以在模板中选择，方法是在引入Moment.js之后，立即把两个字母的语言代码传给locale()函数。\n\n例如，配置Moment.js使用西班牙语及中文的方式如下：\n\n```\n{% block scripts %}\n{{ super() }}\n{{ moment.include_moment() }}\n{{ moment.locale('es') }}\n{% endblock %}\n```\n//使用中文的时候将es改为zh_CN\n\n\n附加：Flask-Moment常用格式化参数\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_10.png?raw=true)\n\n参考博客（https://www.cnblogs.com/agmcs/p/4446589.html）\n\n### 四、Web表单\nFlask-WTF扩展可以把处理Web表单的过程变成一种愉悦的体验。\n\n```\n(venv) $ pip install flask-wtf\n```\n\n#### 4.1 配置\n与其他扩展不同，Flask-WTF无需在应用层初始化，但是它要求应用配置一个密钥。密钥是一个由随机字符构成的唯一字符串，通过加密或签名以不同的方式提升应用的安全性。Flask使用这个密钥保护用户会话，以防被篡改。\n\n示例4-1 配置Flask-WTF密钥\n\n```\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'hard to guess string'\n```\napp.config字典可用于存储Flask、扩展和应用自身的配置变量。使用标准字典句法就能把配置添加到app.config对象中。第七章会详细介绍管理大型应用配置的合理方式。\n\nFlask-WTF  之所以要求应用配置一个密钥，是为了防止表单遭到跨站请求伪造（CSRF，cross-site  request  forgery）攻击。\n\n恶意网站把请求发送到被攻击者已登录的其他网站时，就会引发CSRF攻击。Flask-WTF为所有表单生成安全令牌，存储在用户会话中。令牌是一种加密签名，根据密钥生成。　\n\n为了增强安全性，密钥不应该直接写入源码，而要保存在环境变量中。这一技术在第 7 章介绍。\n\n#### 4.2 表单类\n使用  Flask-WTF  时，在服务器端，每个  Web  表单都由一个继承自FlaskForm的类表示。这个类定义表单中的一组字段，每个字段都用对象表示。字段对象可附属一个或多个验证函数。验证函数用于验证用户提交的数据是否有效。\n\n示例  4-2  是一个简单的Web表单，包含一个文本字段和一个提交按钮。\n\n示例4-2 定义表单类\n\n```\nfrom  flask_wtf  import  FlaskForm\nfrom  wtforms  import  StringField,  SubmitField\nfrom  wtforms.validators  import  DataRequired\n\nclass  NameForm(FlaskForm):\n    name =  StringField('What  is  your  name?',  validators=[DataRequired()])\n    submit =  SubmitField('Submit')\n```\n\n这个表单中的字段都定义为类变量，而各个类变量的值是相应字段类型的对象。在这个示例中，NameForm  表单中有一个名为name的文本字段和一个名为  submit 的提交按钮。StringField类表示属性为  type=\"text\"的HTML<input>元素。SubmitField 类表示属性为type=\"submit\"的HTML<input>元素。字段构造函数的第一个参数是把表单渲染成  HTML 时使用的标注（label）。 \n\nStringField  构造函数中的可选参数validators指定一个由验证函数组成的列表，在接受用户提交的数据之前验证数据。验证函数DataRequired()确保提交的字段内容不为空。　\n\nFlaskForm 基类由  Flask-WTF  扩展定义，所以要从 flask_wtf 中导入。然而，字段和验证函数却是直接从 WTForms 包中导入的。 \n\nWTForms  支持的  HTML  标准字段如表  4-1  所示。\n\n表4-1：WTForms支持的HTML标准字段\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_11.png?raw=true)\n\n![image](https://github.com/dbat2017/blog_images/blob/master/Python_Flask/1_12.png?raw=true)\n\nWTForms内建的验证函数如表4-2所示。\n\n表4-2：WTForms验证函数\n\n==暂时未填写此表==\n\n#### 4.3 把表单渲染成HTML\n表单字段是可调用的，在模板中调用后会渲染成  HTML。假设视图函数通过  form  参数把一个  NameForm  实例传入模板，在模板中可以生成一个简单的  HTML  表单，如下所示：\n\n```\n<form  method=\"POST\">\n     {{  form.hidden_tag()  }}\n     {{  form.name.label  }}  {{  form.name()  }}\n     {{  form.submit()  }}\n </form>\n```\n\n注意，除了  name 和  submit  字段，这个表单还有个  form.hidden_tag()  元素。这个元素生成一个隐藏的字段，供  Flask-WTF 的  CSRF  防护机制使用。\n\n当然，这种方式渲染出的表单还很简陋。调用字段时传入的任何关键字参数都将转换成字段的  HTML  属性。例如，可以为字段指定  id或  class  属性，然后为其定义  CSS  样式：\n\n```\n<form  method=\"POST\">\n     {{  form.hidden_tag()  }}\n     {{  form.name.label  }}  {{  form.name(id='my-text-field')  }}\n{{  form.submit()  }}\n </form>\n```\n即便能指定HTML属性，但按照这种方式渲染及美化表单的工作量还是很大，所以在条件允许的情况下，最好使用Bootstrap的表单样式。Flask-Bootstrap  扩展提供了一个高层级的辅助函数，可以使用  Bootstrap 预定义的表单样式渲染整个  Flask-WTF  表单，而这些操作只需一次调用即可完成。使用  Flask-Bootstrap，上述表单可以用下面的方式渲染： \n\n```\n{%  import  \"bootstrap/wtf.html\"  as  wtf  %}\n{{  wtf.quick_form(form)  }}\n```\n\n\nimport指令的使用方法和普通Python代码一样，通过它可以导入模板元素，在多个模板中使用。导入的bootstrap/wtf.html文件中定义了一个使用Bootstrap渲染Flask-WTF表单对象的辅助函数。wtf.quick_form()函数的参数为Flask-WTF表单对象，使用Bootstrap的默认样式渲染传入的表单。hello.py 的完整模板如示例 4-3  所示。\n\n示例  4-3　templates/index.html：使用  Flask-WTF 和  Flask-Bootstrap  渲染表单 \n\n```\n{%  extends  \"base.html\"  %}\n{%  import  \"bootstrap/wtf.html\"  as  wtf  %}\n\n{%  block  title  %}Flasky{%  endblock  %}\n\n{%  block  page_content  %}\n<div  class=\"page-header\">\n    <h1>Hello,  {%  if  name  %}{{  name  }}{%  else  %}Stranger{%  endif  %}!</h1>\n </div>\n{{  wtf.quick_form(form)  }}\n{%  endblock  %}\n```\n\n\n模板的内容区现在有两部分。第一部分是页头，显示欢迎消息。这里用到了一个模板条件语句。Jinja2 的条件语句格式为  {%  if condition  %}...{%  else  %}...{%  endif  %}。如果条件的计算结果为 True，那么渲染  if 和  else  指令之间的内容。\n\n如果条件的计算结果为  False，则渲染  else 和  endif  指令之间的内容。在这个例子中，如果定义了  name  变量，则渲染  Hello,  {{  name  }}!，否则渲染Hello,Stranger!。内容区的第二部分使用  wtf.quick_form()  函数渲染  NameForm  对象。\n\n#### 4.4 在视图函数中处理表单\n在新版hello. py 中，视图函数index() 有两个任务：一是渲染表单，二是接收用户在表单中填写的数据。示例4- 4 是更新后的index() 视图函数。\n\n示例 4-4 　hello. py：使用GET 和POST 请求方法处理Web 表单\n\n```\n@app. route('/', methods=[' GET', 'POST']) \ndef index(): \n    name = None \n    form = NameForm() \n    if form. validate_ on_ submit(): \n        name = form. name. data \n        form. name. data = '' \n    return render_ template(' index. html', form= form, name= name)\n```\napp. route 装饰器中多出的methods参数告诉Flask，在URL映射中把这个视图函数注册为GET和POST 请求的处理程序。如果没指定methods参数，则只把视图函数注册为GET请求的处理程序。这里有必要把POST 加入方法列表，因为更常使用POST请求处理表单提交。\n\n表单也可以通过GET请求提交，但是GET 请求没有主体，提交的数据以查询字符串的形式附加到URL中，在浏览器的地址栏中可见。\n\n基于这个以及其他多个原因，处理表单提交几乎都使用POST 请求。局部变量name用于存放表单中输入的有效名字，如果没有输入，其值为None。\n\n如上述代码所示，我们在视图函数中创建了一个NameForm实例，用于表示表单。提交表单后，如果数据能被所有验证函数接受，那么validate_on_submit()方法的返回值为True，否则返回False。这个函数的返回值决定是重新渲染表单还是处理表单提交的数据。\n\n用户首次访问应用时，服务器会收到一个没有表单数据的GET 请求，所以validate_ on_ submit() 将返回False。此时，if语句的内容将被跳过，对请求的处理只是渲染模板，并传入表单对象和值为None 的name 变量作为参数。用户会看到浏览器中显示了一个表单。用户提交表单后，服务器会收到一个包含数据的POST 请求。validate_ on_ submit() 会调用名字字段上依附的DataRequired() 验证函数。如果名字不为空，就能通过验证，validate_ on_ submit() 返回True。现在，用户输入的名字可通过字段的data 属性获取。在if 语句中，把名字赋值给局部变量name，然后再把data 属性设为空字符串，清空表单字段。因此，再次渲染这个表单时，各字段中将没有内容。最后一行调用render_ template() 函数渲染模板，但这一次参数name 的值为表单中输入的名字，因此会显示一个针对该用户的欢迎消息。\ngithub仓库里4a版本是该项目版本：\n\n```\ngit checkout 4a\n```\n\n#### 4.5 重定向和用户会话\n前一版hello.py存在一个可用性问题。用户输入名字后提交表单，然后点击浏览器的刷新按钮，会看到一个莫名其妙的警告，要求在再次提交表单之前进行确认。之所以出现这种情况，是因为刷新页面时浏览器会重新发送之前发送过的请求。\n\n如果前一个请求是包含表单数据的POST请求，刷新页面后会再次提交表单。多数情况下，这并不是我们想执行的操作，因此浏览器才要求用户确认。\n\n很多用户不理解浏览器发出的这个警告。鉴于此，最好别让Web 应用把POST请求作为浏览器发送的最后一个请求。\n\n这种需求的实现方式是，使用重定向作为POST 请求的响应，而不是使用常规响应。重定向是一种特殊的响应，响应内容包含的是URL，而不是HTML 代码的字符串。\n\n浏览器收到这种响应时，会向重定向的URL 发起GET 请求，显示页面的内容。这个页面的加载可能要多花几毫秒，因为要先把第二个请求发给服务器。除此之外，用户不会察觉到有什么不同。现在，前一个请求是GET请求，所以刷新命令能像预期的那样正常运作了。这个技巧称为Post / 重定向/Get 模式。\n\n但这种方法又会引起另一个问题。应用处理POST 请求时，可以通过form.name.data获取用户输入的名字，然而一旦这个请求结束，数据也就不见了。\n\n因为这个POST请求使用重定向处理，所以应用需要保存输入的名字，这样重定向后的请求才能获得并使用这个名字，从而构建真正的响应。\n\n应用可以把数据存储在用户会话中，以便在请求之间“记住”数据。用户会话是一种私有存储，每个连接到服务器的客户端都可访问。我们在第2 章介绍过用户会话，它是请求上下文中的变量，名为session，像标准的Python 字典一样操作。\n\n默认情况下，用户会话保存在客户端cookie 中，使用前面设置的密钥加密签名。如果篡改了cookie 的内容，签名就会失效，会话也将随之失效。\n\n示例4- 5 是index() 视图函数的新版本，实现了重定向和用户会话。\n\n示例4- 5 　hello. py：重定向和用户会话\n\n```\nfrom flask import Flask, render_ template, session, redirect, url_for \n@app. route('/', methods=[' GET', 'POST']) \ndef index(): \n    form = NameForm() \n    if form. validate_ on_ submit(): \n        session[' name'] = form. name. data \n        return redirect( url_ for(' index')) \n    return render_ template(' index. html', form= form, name= session. get(' name'))\n```\n应用的前一个版本在局部变量name 中存储用户在表单中输入的名字。这个变量现在保存在用户会话中，即session['name']，所以在两次请求之间能记住输入的值。\n\n现在，包含有效表单数据的请求最后会使视图函数调用redirect() 函数。这是Flask 提供的辅助函数，用于生成HTTP 重定向响应。redirect() 函数的参数是重定向的URL，这里使用的重定向URL 是应用的根URL，因此重定向响应本可以写得更简单一些，写成redirect('/')，不过这里却使用了Flask 提供的URL 生成函数url_ for()（参见第3 章）。\n\nurl_ for() 函数的第一个且唯一必须指定的参数是端点名，即路由的内部名称。默认情况下，路由的端点是相应视图函数的名称。在这个示例中，处理根URL 的视图函数是index()，因此传给url_ for() 函数的名字是index。\n\n最后一处改动位于render_ template() 函数中，现在我们使用session. get(' name') 直接从会话中读取name 参数的值。与普通的字典一样，这里使用get() 获取字典中键对应的值，可以避免未找到键时抛出异常。如果指定的键不存在，则get() 方法返回默认值None。　\n\n如果你从GitHub 上克隆了这个应用的Git 仓库，可以执行git checkout 4b 检出应用的这个版本。\n\n使用这个版本的应用，在浏览器中刷新后看到的新页面就与预期一样了。\n\n#### 4.6 闪现消息\n请求完成后，有时需要让用户知道状态发生了变化，可以是确认消息、警告或者错误提醒。一个典型例子是，用户提交有一项错误的登录表单后，服务器发回的响应重新渲染登录表单，并在表单上面显示一个消息，提示用户名或密码无效。\n\nFlask 本身内置这个功能。如示例4- 6 所示，flash() 函数可实现这种效果。\n\n示例4- 6 　hello. py：闪现消息\n\n```\nfrom flask import Flask, render_ template, session, redirect, url_ for, flash \n@app. route('/', methods=[' GET', 'POST']) \ndef index(): \n    form = NameForm() \n    if form. validate_ on_ submit(): \n        old_ name = session. get(' name')\n    if old_ name is not None and old_ name != form. name. data: \n        flash(' Looks like you have changed your name!') \n        session[' name'] = form. name. data \n        return redirect( url_ for(' index')) \n    return render_ template(' index. html', form = form, name = session. get(' name'))\n```\n\n在这个示例中，每次提交的名字都会和存储在用户会话中的名字进行比较，而会话中存储的名字是前一次在这个表单中提交的数据。如果两个名字不一样，就会调用flash() 函数，在发给客户端的下一个响应中显示一个消息。\n\n仅调用flash() 函数并不能把消息显示出来，应用的模板必须渲染这些消息。最好在基模板中渲染闪现消息，因为这样所有页面都能显示需要显示的消息。Flask 把get_ flashed_ messages() 函数开放给模板，用于获取并渲染闪现消息，如示例4-7所示。\n\n示例4-7 　templates/ base. html：渲染闪现消息\n\n```\n{% block content %} \n< div class=\" container\"> \n    {% for message in get_ flashed_ messages() %} \n    < div class=\" alert alert- warning\"> \n        < button type=\" button\" class=\" close\" data- dismiss=\" alert\">& times;</ button> \n        {{ message }}\n    </ div> \n    {% endfor %} \n    {% block page_ content %}{% endblock %} \n</ div> \n{% endblock %}\n```\n\n这个示例使用Bootstrap 提供的CSS alert 样式渲染警告消息。\n\n这里使用了循环，因为在之前的请求循环中每次调用  flash()  函数时都会生成一个消息，所以可能有多个消息在排队等待显示。get_flashed_messages()  函数获取的消息在下次调用时不会再次返回，因此闪现消息只显示一次，然后就消失了。\n\n如果你从  GitHub 上克隆了这个应用的  Git  仓库，那么可以执行  git  checkout  4c  检出应用的这个版本。\n\n从  Web  表单中获取用户输入的数据是多数应用都需要的功能，把数据保存在永久存储器中也是一样。第 5 章将介绍如何在  Flask 中使用数据库。\n\n### 写到这里\n终于整理完了，现在是十点半，果然晚上的精神比早上好很多！！！！！！\n\n整理匆忙，不足之处可以联系我邮箱号码在首页的about页面上有，谢谢啦！有疑问的也可以联系我，至于我的Python Flask框架开发的网站源码能不能开源，我在斟酌，什么时候上线了会告诉大家，同时也会传在我的gayhub页面上，大家可以闲着没事看看，hhhhhhhhhh\n\n晚安咯！！！\n","tags":["Python","Flask"],"categories":["学习笔记"]},{"title":"第一篇文章","url":"/2019/03/03/第一篇文章/","content":"准确来说，这不是这个域名的第一篇文章，而是2019年更换完主题后的第一篇文章。之前因为18年10月搭建好没心思搞这个网站了，所以好多东西都没整理。\n\n今年3月重启我的网站，记录生活。\n\n主题参考大佬的\n\n![image](https://github.com/dbat2017/blog_images/blob/master/first_1/index.png?raw=true)\n\n地址是：https://blog.geekmubai.com/\n\n在这中间还有一个大佬帮忙，他的博客地址：https://1amfine2333.github.io/\n\n先写到这里。。。\n\nTime：2019.03.03 20:40","tags":["GitHub","随笔","参考大佬"],"categories":["初始化"]},{"title":"HEXO的简单搭建","url":"/2018/10/22/HEXO的简单搭建/","content":"HEXO的简单搭建\n\n其实平时自己写的文章并不多，加上平台搭建好以后好多麻烦事，就一直没有更新文章，耽搁了。现在用HEXO比较多，加上HEXO搭建使用都比较方便，就选择使用它了。\n\n以下就是安装步骤了：\n\n1. 安装Git Bash\n\n我的是windows环境，所以下载windows版本并安装就可以了。\n下载地址：https://gitforwindows.org/\n点击download下载即可\n安装步骤：双击下载好的exe文件，一路next就好啦\n安装好后，打开cmd命令框，查看版本：\n命令：git version (写这篇博客的时候最新版本：2.19.1)\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540192990701.png?raw=true)\n\n2. 安装NodeJs\n\nHEXO是基于NodeJS环境的静态博客，里面的npm工具相当有用，所以还是要安装它。\n下载地址：https://nodejs.org/en/\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540193390220.png?raw=true)\n说明：LTS为长期支持版，Current为当前最新版\n我下载的是LTS版本，写这个博客时用的版本就是v8.12.0\n\n安装步骤：下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完进入cmd命令框，输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自行百度添加环境变量吧。还有一种检测方法，只要在cmd命令框中能够执行“node -v”命令查看版本即可。\n\n3. 安装HEXO \n\n看到前边这么多安装步骤，千万不要慌，一定要稳住。其实很简单！\n首先，创建一个文件夹，用来存放所有博客的东西，然后在该文件夹下进入命令行。\n安装hexo命令：npm i -g hexo\n安装完成后，使用“hexo -v”命令查看版本：\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540193709937.png?raw=true)\n\n初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件：\n\n解释一下：\nnode_modules：是依赖包\npublic：存放的是生成的页面\nscaffolds：命令生成文章等的模板\nsource：用命令创建的各种文章\nthemes：主题\n_config.yml：整个博客的配置\ndb.json：source解析所得到的\npackage.json：项目所需模块项目的配置信息\n\n4. 搭桥到github\n\n没账号的创建账号，地址是：https://github.com/\n有账号以后继续按照下面进行。\n首先在GitHub上创建一个repo\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540193860399.png?raw=true)\n名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540193978746.png?raw=true)\n然后回到cmd中，配置github账户信息（YourName和YourEail都替换成你自己的）：\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540194063425.png?raw=true)\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540194095727.png?raw=true)\n然后创建SSH，在cmd中输入：ssh-keygen -t rsa -C \"youremail@example.com”，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540194223183.png?raw=true)\n将上面获取的ssh放到github中：\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540194292093.png?raw=true)\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/hexo_jiandan/1540194313388.png?raw=true)\n添加一个 New SSH key ，title随便取，key就填刚刚那一段。在gitbash中验证是否添加成功：ssh -T git@github.com\n完成下一步你就成功啦！\n5. 一步之遥\n\n用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：\ndeploy:  type: git  repo: https://github.com/YourgithubName/YourgithubName.github.io.gitbranch: master\n回到gitbash中，进入你的blog目录，分别执行以下命令：\nhexo cleanhexo generatehexo server\n\n注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。\n打开浏览器输入：http://localhost:4000\n接着你就可以遇见天使的微笑了~\n6. 上传到github\n\n先安装一波：npm install hexo-deployer-git --save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）\n执行命令(建议每次都按照如下步骤部署)：\nhexo clean\nhexo generate\nhexo deploy\n\n注意deploy的过程中要输入你的username及passward。如下：\n\n在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！\n感觉gitbash中东西太多的时候输入clear命令清空。\n\n7. 修改及配置主题\n\nhexo初始化之后默认的主题是landscape , 然后你可以去这个地址里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！\n\n","tags":["Hexo","Git","NodeJS","GitHub"],"categories":["教程"]},{"title":"Hello World","url":"/2018/10/09/first/","content":"第一篇\n终于弄好了，半个小时不到？\n有个智障上次弄了一天好像都没弄好\n真好\n![Alt text](https://github.com/dbat2017/blog_images/blob/master/first/1539071012607.png?raw=true)\n这是个截图，我就试试印象笔记创建md文件好不好用！","tags":["随笔"],"categories":["初始化"]}]